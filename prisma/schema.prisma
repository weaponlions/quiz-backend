generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum examBoardTypeEnum {
  SPECIAL
  STATE
  CENTRAL
}

enum accessTypeEnum {
  PUBLIC
  PRIVATE
}

enum roundTypeEnum {
  MAIN
  PRELIMS
}

enum correctAnswerEnum {
  A
  B
  C
  D
}

model User {
  id        Int      @id @unique @default(autoincrement())
  username  String   @db.VarChar(255)
  password  String   @db.VarChar(255)
  subject ExamSubject[]
  round ExamRound[]
}


model ExamBoard {
  id        Int      @id @unique @default(autoincrement())

  examName     String   @db.VarChar(255)
  examBoardShortName     String   @db.VarChar(255) 
  examBoardLongName     String   @db.VarChar(255) 

  boardLogo     String   @db.VarChar(255)
  examLogo     String   @db.VarChar(255) 

  examBoardType     examBoardTypeEnum 
  subjects ExamSubject[]
  records ExamRound[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean @default(true)

  @@index([examName, examBoardType])
}

model ExamRound {
  id        Int      @id @unique @default(autoincrement())
  
  roundName     String   @db.VarChar(255)
  sectionName     String   @db.VarChar(255) 

  roundType     roundTypeEnum
  examId     Int
  exam     ExamBoard  @relation(fields: [examId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean @default(true)
  ownerId     Int
  owner     User?  @relation(fields: [ownerId], references: [id])

  accessType accessTypeEnum @default(PRIVATE)

  @@index([roundName])
  Question TopicQuestion[]
}


model ExamSubject {
  id        Int      @id @unique @default(autoincrement())
  subjectName     String   @db.VarChar(255) 
  examId     Int
  
  exam     ExamBoard  @relation(fields: [examId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean @default(true)

  topics SubjectTopic[]
  ownerId     Int
  owner     User?  @relation(fields: [ownerId], references: [id])
  accessType accessTypeEnum @default(PRIVATE)

  @@index([subjectName, examId])
}



model SubjectTopic {
  id        Int      @id @unique @default(autoincrement())
  topicName     String   @db.VarChar(255) 
  subjectId     Int
  
  subject     ExamSubject  @relation(fields: [subjectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean @default(true)

  questions TopicQuestion[]

  @@index([topicName, subjectId])
}




model TopicQuestion {
  id        Int      @id @unique @default(autoincrement())
  questionText     String   @db.Text() 
  shortText     String   @db.VarChar(255) 

  
  answerA     String   @db.Text() 
  answerB     String   @db.Text() 
  answerC     String   @db.Text() 
  answerD     String   @db.Text() 

  answerCorrect     correctAnswerEnum
  topicId     Int
  roundId     Int
  
  topic     SubjectTopic?  @relation(fields: [topicId], references: [id])
  round     ExamRound?  @relation(fields: [roundId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean @default(true)

  year      String  @db.VarChar(5)

  @@index([shortText, topicId])
}


